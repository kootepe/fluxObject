[defaults]
name = "testing_2021"
# set ini as active or inactive
active = 1
# mode defines how to the script will be ran
mode = man
# set to 1 to create excel summaries, this hogs quite a bit of RAM
create_excel = 1
# path in the container where to place created excels, no need to change this
excel_directory = ./excel_directory
; excel_directory = ./excel_directory_forest
# column to use to sort the output excel, by default sorted by datetime
excel_sort = chamber
# limit the amount of data to process on one run of the script, in days
limit_data = 80
# set to 1 to use .env file
use_dotenv = 0
# logging level
logging_level = debug
# default pressure for flux calculation if no file supplied
default_temperature = 10.0
# default pressure for flux calculation if no file supplied
# hPa
default_pressure = 1000.0
# 1 to get temp and pressure from file, 0 to use defaults
get_temp_and_pressure_from_file = 1
# file that defines the cycle of the auto chambers
chamber_cycle_file =
# how many seconds between each file
file_timestep = 86400
# date to use if there's no data in the database
season_start = 2021-06-01 00:00:00
# how much time to remove from each end of measurement, percentage
# defaults to 20 if not used
measurement_perc = 20

[measuring_chamber]
# in mm
chamber_height = 500

[chamber_start_stop]
# the length of the cycle for a single chamber
end_of_cycle = 300
# how many seconds into the cycle to start the gas measurement
start_of_measurement = 60
# how many seconds into the cycle to end the measurement
end_of_measurement = 240

[manual_measurement_time_data]
# the other parameters for measurement files like columns and names are
# currently hardcoded
scan_or_generate = 1
# path to the file(s) you are reading
path = /home/eerokos/python_projects/fluxObject/forsus/measurementTimes/
; path = /home/eerokos/chamber_measurements/manual_times/
; path = /home/eerokos/python_projects/fluxObject/forsus/pine_times/
; path = ./manual_measurement_timestamps
file_timestamp_format = %%y%%m%%d
file_extension = .txt

# gas measurement
[measurement_data]
scan_or_generate = 1
# path to the file(s) you are reading
; path = ./manual_measurement_data
; path = /home/eerokos/chamber_measurements/manual_measurements/
path = /home/eerokos/python_projects/fluxObject/forsus/measurementDataManual/
# how many rows to skips in the csv file
skiprows = 10
# the format of the timestamp in the .csv file
file_timestamp_format = %%Y-%%m-%%d
# file extension of the file to read
file_extension = .data
# .csv delimiter
delimiter = \t
# names of the columns that will be read
names=error_code,date,time,h2o,co2,ch4
# which columns to read from the csv file, numbers separated by commas eg.
# columns = 1,2,3,4
columns_alternative = 5,6,7,8,9,10
# data types of the columns that will be read, comma separated. eg,
# dtypes = str,str,int,float
dtypes = int,str,str,float,float,float
# old licor files are missing diagnostic column, so column numbers are
# shifted to the left
columns = 4,6,7,8,9,10

# air pressure measurement
; [air_pressure_data]
; # 1 = scan, 0 = generate 
; scan_or_generate = 1
; # path to the file(s) you are reading
; ; path = ./air_data
; path = /home/eerokos/python_projects/fluxObject/forsus/oulangan_fluxi_dataa/airtemp_airpres/
; # this variable needs a better name...
; file_timestamp_format = CR1000X Oulanka PI Tower_MetData
; # .csv delimiter
; delimiter = ,
; # how many rows to skips in the csv file
; skiprows = 4
; # number of the column to read in the .csv, start at 0
; timestamp_column = 0
; timestamp_column_name = datetime 
; timestamp_column_dtype = str
; # the format of the timestamp in the .csv file
; timestamp_format = %%Y-%%m-%%d %%H:%%M:%%S
; # number of the column to read in the .csv, start at 0
; measurement_column = 16
; measurement_column_name = air_pressure
; measurement_column_dtype = float

# air temperature measurement
; [air_temperature_data]
; # 1 = scan, 0 = generate 
; scan_or_generate = 1
; # path to the file(s) you are reading
; ; path = ./air_data
; path = /home/eerokos/python_projects/fluxObject/forsus/oulangan_fluxi_dataa/airtemp_airpres/
; # this variable needs a better name
; file_timestamp_format = CR1000X Oulanka PI Tower_MetData
; # .csv delimiter
; delimiter = ,
; # how many rows to skips in the csv file
; skiprows = 4
; # number of the column to read in the .csv, start at 0
; timestamp_column = 0
; timestamp_column_name = datetime 
; timestamp_column_dtype = str
; # the format of the timestamp in the .csv file
; timestamp_format = %%Y-%%m-%%d %%H:%%M:%%S
; # number of the column to read in the .csv, start at 0
; measurement_column = 14 
; measurement_column_name = air_temperature
; measurement_column_dtype = float

[aux_data_plot_constants]
name = plot_constants
path = ./
file_name = plot_constants.csv
merge_method = id

[aux_data_air_temperature]
name = air_temperature
path = /home/eerokos/python_projects/fluxObject/forsus/oulangan_fluxi_dataa/airtemp_airpres/
file_name = CR1000X Oulanka PI Tower_MetData.dat
merge_method = time
tolerance = 2h
sep = ,
skiprows = 0,2,3
usecols = 0,14
; usecols = TIMESTAMP,AirTC_Avg
header = 0
names= datetime,air_temperature
index_col = datetime
parse_dates = datetime

[aux_data_air_pressure]
name = air_pressure
path = /home/eerokos/python_projects/fluxObject/forsus/oulangan_fluxi_dataa/airtemp_airpres/
file_name = CR1000X Oulanka PI Tower_MetData.dat
merge_method = time
tolerance = 2h
sep = ,
skiprows = 0,2,3
usecols = 0,16
header = 0
names= datetime,air_pressure
; usecols = TIMESTAMP,AirTC_Avg
index_col = datetime
parse_dates = datetime


[aux_data_soil_temps]
name = soil_temp
path = ./
file_name = plot_temps_clean_new.csv
merge_method = timeid
tolerance = 2h
; filepath_or_buffer = ./plot_temps_clean_new.csv
sep = ,
parse_dates = datetime
index_col = datetime

[aux_data_snow_depths]
name = snow_depth
path = ./
file_name = snow_depths_20192024.csv
direction = backward
merge_method = timeid
tolerance = 1000d
; filepath_or_buffer = ./snow_depths_20192024.csv
sep = ,
parse_dates = datetime
index_col = datetime

[influxDB]
# URL of your Influxdb instance
url = 
# read/write token for the bucket you are pusing data to
token = 
# name of the bucket where to push the data
bucket = 
# name of the organization where the bucket is located
organization = 
# name of the measurement in the bucket
measurement_name = 
# timeout value for influxdb
timeout = 10000
# timezone of the data, needs to be in specific format
timezone = 
# which column to use for tagging the data
tag_columns = chamber
# format of the infludb timestamp
influxdb_timestamp_format = %%Y-%%m-%%d %%H:%%M:%%S
